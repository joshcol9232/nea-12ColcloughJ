package AES

import (
  "fmt"
  "testing"
)

func TestSubBytes(t *testing.T) {
  testVector := []byte{ 76, 201,  25, 213,
                       255,  41,  13,  94,
                        44,  14, 215, 104,
                       168, 101,  19,  89} // Randomly generated by Python

  expectedOutcome := fmt.Sprintf("%x", []byte{41, 221, 212, 3,
                                              22, 165, 215, 88,
                                              113, 171, 14, 69,
                                              194, 77, 125, 203})
  subBytes(testVector)
  actualOutcome := fmt.Sprintf("%x", testVector)
  if actualOutcome != expectedOutcome {
    t.Fatalf("Expected %s but got %s", expectedOutcome, actualOutcome)
  }
}

func TestInvSubBytes(t *testing.T) {
  testVector := []byte{41, 221, 212, 3,
                      22, 165, 215, 88,
                      113, 171, 14, 69,
                      194, 77, 125, 203}

  expectedOutcome := fmt.Sprintf("%x", []byte{ 76, 201,  25, 213,
                                              255,  41,  13,  94,
                                               44,  14, 215, 104,
                                              168, 101,  19,  89})
  invSubBytes(testVector)
  actualOutcome := fmt.Sprintf("%x", testVector)
  if actualOutcome != expectedOutcome {
    t.Fatalf("Expected %s but got %s", expectedOutcome, actualOutcome)
  }
}

func TestShiftRows(t *testing.T) {
  testVector := []byte{ 76, 201,  25, 213,  // Taken from TestSubBytes
                       255,  41,  13,  94,
                        44,  14, 215, 104,
                       168, 101,  19,  89}

  expectedOutcome := fmt.Sprintf("%x", []byte{ 76,  41, 215,  89,
                                              255,  14,  19, 213,
                                               44, 101,  25,  94,
                                              168, 201,  13, 104})

  shiftRows(testVector) // Done by reference
  actualOutcome := fmt.Sprintf("%x", testVector)
  if actualOutcome != expectedOutcome {
    t.Fatalf("Expected %s but got %s", expectedOutcome, actualOutcome)
  }
}

func TestInvShiftRows(t *testing.T) {
  testVector := []byte{ 76,  41, 215,  89, // Taken from TestSubBytes
                       255,  14,  19, 213,
                        44, 101,  25,  94,
                       168, 201,  13, 104}

  expectedOutcome := fmt.Sprintf("%x", []byte{ 76, 201,  25, 213,
                                              255,  41,  13,  94,
                                               44,  14, 215, 104,
                                              168, 101,  19,  89})
  invShiftRows(testVector)
  actualOutcome := fmt.Sprintf("%x", testVector)
  if actualOutcome != expectedOutcome {
    t.Fatalf("Expected %s but got %s", expectedOutcome, actualOutcome)
  }
}

func TestMixColumns(t *testing.T) {
  testVector := []byte{0xdb, 0x13, 0x53, 0x45, // Different test vectors from https://en.wikipedia.org/wiki/Rijndael_MixColumns
                       0xf2, 0x0a, 0x22, 0x5c,
                       0x01, 0x01, 0x01, 0x01,
                       0x2d, 0x26, 0x31, 0x4c}

  expectedOutcome := fmt.Sprintf("%x", []byte{0x8e, 0x4d, 0xa1, 0xbc,
                                              0x9f, 0xdc, 0x58, 0x9d,
                                              0x01, 0x01, 0x01, 0x01,
                                              0x4d, 0x7e, 0xbd, 0xf8})

  mixColumns(testVector)
  actualOutcome := fmt.Sprintf("%x", testVector)
  if actualOutcome != expectedOutcome {
    t.Fatalf("Expected %s but got %s", expectedOutcome, actualOutcome)
  }
}

func testInvMixColumns(t *testing.T) {
  testVector := []byte{0x8e, 0x4d, 0xa1, 0xbc,
                       0x9f, 0xdc, 0x58, 0x9d,
                       0x01, 0x01, 0x01, 0x01,
                       0x4d, 0x7e, 0xbd, 0xf8}

  expectedOutcome := fmt.Sprintf("%x", []byte{0xdb, 0x13, 0x53, 0x45,
                                              0xf2, 0x0a, 0x22, 0x5c,
                                              0x01, 0x01, 0x01, 0x01,
                                              0x2d, 0x26, 0x31, 0x4c})
  invMixColumns(testVector)
  actualOutcome := fmt.Sprintf("%x", testVector)
  if actualOutcome != expectedOutcome {
    t.Fatalf("Expected %s but got %s", expectedOutcome, actualOutcome)
  }
}

func TestKeyExpansionCore(t *testing.T) {
  testVector := [4]byte{1, 2, 3, 4}
  //2, 3, 4, 1
  //sBox[2], sBox[3], sBox[4], sBox[1]
  // = 119, 123, 242, 124
  // 119 ^ rcon[0] = 119 ^ 0x8d = 250
  // 250, 123, 242, 124
  expectedOutcome := fmt.Sprintf("%x", [4]byte{250, 123, 242, 124})
  actualOutcome := fmt.Sprintf("%x", keyExpansionCore(testVector, 0))
  if actualOutcome != expectedOutcome {
    t.Fatalf("Expected %s but got %s", expectedOutcome, actualOutcome)
  }
}

func TestKeyExpansion(t *testing.T) {
  testVector00 :=   []byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  testVector1234 := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6}
  testVectorff :=   []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}

  // Expected key expansion for each of the keys:
  expectedOutcome00 := fmt.Sprintf("%x", [176]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                   0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63,
                                                   0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa,
                                                   0x90, 0x97, 0x34, 0x50, 0x69, 0x6c, 0xcf, 0xfa, 0xf2, 0xf4, 0x57, 0x33, 0x0b, 0x0f, 0xac, 0x99,
                                                   0xee, 0x06, 0xda, 0x7b, 0x87, 0x6a, 0x15, 0x81, 0x75, 0x9e, 0x42, 0xb2, 0x7e, 0x91, 0xee, 0x2b,
                                                   0x7f, 0x2e, 0x2b, 0x88, 0xf8, 0x44, 0x3e, 0x09, 0x8d, 0xda, 0x7c, 0xbb, 0xf3, 0x4b, 0x92, 0x90,
                                                   0xec, 0x61, 0x4b, 0x85, 0x14, 0x25, 0x75, 0x8c, 0x99, 0xff, 0x09, 0x37, 0x6a, 0xb4, 0x9b, 0xa7,
                                                   0x21, 0x75, 0x17, 0x87, 0x35, 0x50, 0x62, 0x0b, 0xac, 0xaf, 0x6b, 0x3c, 0xc6, 0x1b, 0xf0, 0x9b,
                                                   0x0e, 0xf9, 0x03, 0x33, 0x3b, 0xa9, 0x61, 0x38, 0x97, 0x06, 0x0a, 0x04, 0x51, 0x1d, 0xfa, 0x9f,
                                                   0xb1, 0xd4, 0xd8, 0xe2, 0x8a, 0x7d, 0xb9, 0xda, 0x1d, 0x7b, 0xb3, 0xde, 0x4c, 0x66, 0x49, 0x41,
                                                   0xb4, 0xef, 0x5b, 0xcb, 0x3e, 0x92, 0xe2, 0x11, 0x23, 0xe9, 0x51, 0xcf, 0x6f, 0x8f, 0x18, 0x8e})

  expectedOutcomeff := fmt.Sprintf("%x", [176]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xe8, 0xe9, 0xe9, 0xe9, 0x17, 0x16, 0x16, 0x16, 0xe8, 0xe9, 0xe9, 0xe9, 0x17, 0x16, 0x16, 0x16,
                                                   0xad, 0xae, 0xae, 0x19, 0xba, 0xb8, 0xb8, 0x0f, 0x52, 0x51, 0x51, 0xe6, 0x45, 0x47, 0x47, 0xf0,
                                                   0x09, 0x0e, 0x22, 0x77, 0xb3, 0xb6, 0x9a, 0x78, 0xe1, 0xe7, 0xcb, 0x9e, 0xa4, 0xa0, 0x8c, 0x6e,
                                                   0xe1, 0x6a, 0xbd, 0x3e, 0x52, 0xdc, 0x27, 0x46, 0xb3, 0x3b, 0xec, 0xd8, 0x17, 0x9b, 0x60, 0xb6,
                                                   0xe5, 0xba, 0xf3, 0xce, 0xb7, 0x66, 0xd4, 0x88, 0x04, 0x5d, 0x38, 0x50, 0x13, 0xc6, 0x58, 0xe6,
                                                   0x71, 0xd0, 0x7d, 0xb3, 0xc6, 0xb6, 0xa9, 0x3b, 0xc2, 0xeb, 0x91, 0x6b, 0xd1, 0x2d, 0xc9, 0x8d,
                                                   0xe9, 0x0d, 0x20, 0x8d, 0x2f, 0xbb, 0x89, 0xb6, 0xed, 0x50, 0x18, 0xdd, 0x3c, 0x7d, 0xd1, 0x50,
                                                   0x96, 0x33, 0x73, 0x66, 0xb9, 0x88, 0xfa, 0xd0, 0x54, 0xd8, 0xe2, 0x0d, 0x68, 0xa5, 0x33, 0x5d,
                                                   0x8b, 0xf0, 0x3f, 0x23, 0x32, 0x78, 0xc5, 0xf3, 0x66, 0xa0, 0x27, 0xfe, 0x0e, 0x05, 0x14, 0xa3,
                                                   0xd6, 0x0a, 0x35, 0x88, 0xe4, 0x72, 0xf0, 0x7b, 0x82, 0xd2, 0xd7, 0x85, 0x8c, 0xd7, 0xc3, 0x26})

  expectedOutcome1234 := fmt.Sprintf("%x", [176]byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
                                                     0xf2, 0x69, 0x6c, 0x7f, 0xf7, 0x6f, 0x6b, 0x77, 0xfe, 0x6f, 0x6a, 0x75, 0xfd, 0x6b, 0x6f, 0x73,
                                                     0x8f, 0xc1, 0xe3, 0x2b, 0x78, 0xae, 0x88, 0x5c, 0x86, 0xc1, 0xe2, 0x29, 0x7b, 0xaa, 0x8d, 0x5a,
                                                     0x27, 0x9c, 0x5d, 0x0a, 0x5f, 0x32, 0xd5, 0x56, 0xd9, 0xf3, 0x37, 0x7f, 0xa2, 0x59, 0xba, 0x25,
                                                     0xe4, 0x68, 0x62, 0x30, 0xbb, 0x5a, 0xb7, 0x66, 0x62, 0xa9, 0x80, 0x19, 0xc0, 0xf0, 0x3a, 0x3c,
                                                     0x78, 0xe8, 0x89, 0x8a, 0xc3, 0xb2, 0x3e, 0xec, 0xa1, 0x1b, 0xbe, 0xf5, 0x61, 0xeb, 0x84, 0xc9,
                                                     0xb1, 0xb7, 0x54, 0x65, 0x72, 0x05, 0x6a, 0x89, 0xd3, 0x1e, 0xd4, 0x7c, 0xb2, 0xf5, 0x50, 0xb5,
                                                     0x17, 0xe4, 0x81, 0x52, 0x65, 0xe1, 0xeb, 0xdb, 0xb6, 0xff, 0x3f, 0xa7, 0x04, 0x0a, 0x6f, 0x12,
                                                     0xf0, 0x4c, 0x48, 0xa0, 0x95, 0xad, 0xa3, 0x7b, 0x23, 0x52, 0x9c, 0xdc, 0x27, 0x58, 0xf3, 0xce,
                                                     0x81, 0x41, 0xc3, 0x6c, 0x14, 0xec, 0x60, 0x17, 0x37, 0xbe, 0xfc, 0xcb, 0x10, 0xe6, 0x0f, 0x05,
                                                     0x39, 0x37, 0xa8, 0xa6, 0x2d, 0xdb, 0xc8, 0xb1, 0x1a, 0x65, 0x34, 0x7a, 0x0a, 0x83, 0x3b, 0x7f})

  outcome00 := fmt.Sprintf("%x", ExpandKey(testVector00))
  if outcome00 != expectedOutcome00 {
    t.Fatalf("00 Expected %s but got %s", expectedOutcome00, outcome00)
  }

  outcome1234 := fmt.Sprintf("%x", ExpandKey(testVector1234))
  if outcome1234 != expectedOutcome1234 {
    t.Fatalf("1234 Expected %s but got %s", expectedOutcome1234, outcome1234)
  }

  outcomeff := fmt.Sprintf("%x", ExpandKey(testVectorff))
  if outcomeff != expectedOutcomeff {
    t.Fatalf("ff Expected %s but got %s", expectedOutcomeff, outcomeff)
  }
}
