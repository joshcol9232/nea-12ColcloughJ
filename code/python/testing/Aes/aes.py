import time, psutil, os
from multiprocessing import Process


def getOrdOfInp(keyInput):
    ords = []
    for i in list(keyInput):
       ords.append(ord(i))
    return ords

def getBufferSize(percentage):
    mem = psutil.virtual_memory()
    return int(mem.available * percentage)


def keyExpansionCore(inp, i):
    #Shift the inp left by moving the first byte to the end (rotate).
    #t = inp[0]
    #inp[0], inp[1], inp[2], inp[3] = inp[1], inp[2], inp[3], t
    inp[0], inp[1], inp[2], inp[3] = inp[1], inp[2], inp[3], inp[0]

    #S-Box the bytes
    inp[0], inp[1], inp[2], inp[3] = sBox[inp[0]], sBox[inp[1]], sBox[inp[2]], sBox[inp[3]]

    #rcon, more galois feilds that lead to lookup tables.
    inp[0] ^= rcon[i]

    return inp


def expandKey(inputKey, expandedKeys):
    #first 16 bytes of the expandedkeys should be the same 16 as the original key
    for i in range(16):
        expandedKeys[i] = inputKey[i]

    bytesGenerated = 16 #needs to get to 176
    rconIteration = 1
    temp = [0, 0, 0, 0]

    while bytesGenerated < 176:
        #Read 4 bytes for use in keyExpansionCore
        for i in range(4):
            temp[i] = expandedKeys[i + bytesGenerated - 4]

        if bytesGenerated % 16 == 0:    #keys are length 16 bytes so every 16 bytes generated, expand.
            temp = keyExpansionCore(temp, rconIteration)
            rconIteration += 1

        for y in range(4):
            expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ temp[y]
            bytesGenerated += 1

    return expandedKeys


def addRoundKey(state, roundKey):
    #print(state, roundKey, len(state), len(roundKey), "ADD ROUND KEY")
    for i in range(16):
        state[i] ^= roundKey[i]
    return state


def subBytes(state):
    for i in range(len(state)-1):
        state[i] = sBox[state[i]]

    return state


def shiftRows(state):
    temp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

    #row1
    temp[0] = state[0] #Mixes it like this:
    temp[1] = state[5] #
    temp[2] = state[10]# 0  4  8 12         0  4  8 12  shifted left by 0
    temp[3] = state[15]# 1  5  9 13  ---->  5  9 13  1  shifted left by 1
    #row2              # 2  6 10 14  ----> 10 14  2  6  shifted left by 2
    temp[4] = state[4] # 3  7 11 15        15  3  7 11  shifted left by 3
    temp[5] = state[9]
    temp[6] = state[14]
    temp[7] = state[3]
    #row3
    temp[8] = state[8]
    temp[9] = state[13]
    temp[10] = state[2]
    temp[11] = state[7]
    #row4
    temp[12] = state[12]
    temp[13] = state[1]
    temp[14] = state[6]
    temp[15] = state[11]

    for i in range(16):
        state[i] = temp[i]

    return state


def mixColumns(state):
    #Dot product galois feilds of each byte in row x, column x, and reduce to 8 bits if necissary using pre determined num.
    #Uses lookup tables to make it faster, as you only ever multiply by 1, 2 or 3, as Rijndael uses a pre defined matrix to multiply by. Addition is just XOR

    temp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

    #Row 1
    temp[0] = mul2[state[0]] ^ mul3[state[1]] ^ state[2] ^ state[3]
    temp[1] = state[0] ^ mul2[state[1]] ^ mul3[state[2]] ^ state[3]
    temp[2] = state[0] ^ state[1] ^ mul2[state[2]] ^ mul3[state[3]]
    temp[3] = mul3[state[0]] ^ state[1] ^ state[2] ^ mul2[state[3]]
    #Row 2
    temp[4] = mul2[state[4]] ^ mul3[state[5]] ^ state[6] ^ state[7]
    temp[5] = state[4] ^ mul2[state[5]] ^ mul3[state[6]] ^ state[7]
    temp[6] = state[4] ^ state[5] ^ mul2[state[6]] ^ mul3[state[7]]
    temp[7] = mul3[state[4]] ^ state[5] ^ state[6] ^ mul2[state[7]]
    #Row 3
    temp[8] = mul2[state[8]] ^ mul3[state[9]] ^ state[10] ^ state[11]
    temp[9] = state[8] ^ mul2[state[9]] ^ mul3[state[10]] ^ state[11]
    temp[10] = state[8] ^ state[9] ^ mul2[state[10]] ^ mul3[state[11]]
    temp[11] = mul3[state[8]] ^ state[9] ^ state[10] ^ mul2[state[11]]
    #Row 4
    temp[12] = mul2[state[12]] ^ mul3[state[13]] ^ state[14] ^ state[15]
    temp[13] = state[12] ^ mul2[state[13]] ^ mul3[state[14]] ^ state[15]
    temp[14] = state[12] ^ state[13] ^ mul2[state[14]] ^ mul3[state[15]]
    temp[15] = mul3[state[12]] ^ state[13] ^ state[14] ^ mul2[state[15]]

    for i in range(16):
        state[i] = temp[i]

    return state

# def checkBytesNotInteger(chunk):
#     tempChunk = []
#     for item in chunk:
#         if type(item) == type(0):
#             tempItem = bytes(item)
#
#         else:
#             print("AAAA")




def encrypt(state, key, expandedKeys, regularRounds):
    state = addRoundKey(state, key)

    for i in range(regularRounds):
        state = subBytes(state)
        state = shiftRows(state)
        state = mixColumns(state)
        state = addRoundKey(state, expandedKeys[(16 * (i)):(16 * (i+1))])
    #Last round
    state = subBytes(state)
    state = shiftRows(state)
    state = addRoundKey(state, expandedKeys[160:])

    return state


def main():
    #Lookup tables are global so they don't keep getting redefined, as they are constant.
    global sBox
    global rcon
    global mul2
    global mul3

    #       0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f         - first digit of input
    sBox = [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, #00
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, #10
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, #20
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, #30
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, #40
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, #50
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, #60
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, #70
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, #80
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, #90
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, #a0
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, #b0
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, #c0
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, #d0
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, #e0
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16] #f0

    rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,     #https://en.wikipedia.org/wiki/Rijndael_key_schedule
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
            0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
            0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
            0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
            0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
            0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
            0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
            0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
            0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
            0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]

    mul2 = [0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
            0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
            0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
            0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
            0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
            0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
            0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
            0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
            0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
            0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
            0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
            0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
            0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
            0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
            0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
            0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5]

    mul3 = [0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
            0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
            0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
            0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
            0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
            0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
            0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
            0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
            0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
            0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
            0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
            0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
            0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
            0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
            0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
            0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a]



    emptyExpandedKeys = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    #176 empty slots

    key = b"mynamejeffeleven"

    expandedKeys = expandKey(key, emptyExpandedKeys)

    ####Test Files####
    #f = "/run/media/josh/USB/nea-12ColcloughJ-master/code/python/testing/Aes/pictures/smile.bmp"
    #w = "/run/media/josh/USB/nea-12ColcloughJ-master/code/python/testing/Aes/hmmm.txt"
    #f = "/run/media/josh/Storage/kali-linux-2018.1-amd64.iso"
    #f = "/run/media/josh/Storage/Solus-3-Budgie.iso"
    f= "/run/media/josh/USB/IMPORTANT IMAGES/Pics/Important images/bil/bil/Bill Bailey © William Shaw_0.jpg"

    fileSize = os.path.getsize(f)
    print(str(fileSize/1000000) + "MB - File size.")

    perc = 0.05

    bufferSize = getBufferSize(perc)#100000 #50mb uses 618 MB WTF
    print(str(bufferSize/1000000) + "MB - Buffer size.")
    fo = open(f, "rb")
    buff = fo.read(bufferSize)
    one = True
    #fw = open(w, "wb")
    while buff:
        for i in range(len(buff)-1):
            # if i % 1000000 == 0:
            #     print(i/1000000, "MB")
            if i % 16 == 0:
                buffChunk = bytearray(buff[i:i+16])
                #print(repr(buffChunk))
                while len(buffChunk) < 16:
                    print("Not enough bytes, adding a 0.")
                    buffChunk += b"\x00"

                buffChunk = encrypt(buffChunk, key, expandedKeys, 9)

        print("done buff")
        buff = fo.read(bufferSize)


    print("done")
    fo.close()
    # fw.close()




if __name__ == "__main__":
    main()
